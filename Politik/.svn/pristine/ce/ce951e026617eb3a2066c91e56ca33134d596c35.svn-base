package com.saganet.politik.components.administracion;

import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.saganet.politik.database.administracion.RolEO;
import com.saganet.politik.database.administracion.UsuarioEO;
import com.saganet.politik.database.catalogos.DependenciaEO;
import com.saganet.politik.modelos.JavaBeanT;
import com.saganet.politik.modelos.Modelo;

@Component("UsuariosC")
public class UsuariosC {

	@Autowired
	SqlSession sqlSession;

	private static final Logger logger = LoggerFactory.getLogger(UsuariosC.class);

	public UsuarioEO porNick(String nick) {
		UsuarioEO usuario;

		usuario = sqlSession.selectOne("administracion.usuarios.porNick", nick);
		cargarTerritorios(usuario);
		cargarDependencias(usuario);

		return usuario;
	}

	public void cargarTerritorios(UsuarioEO usuario) {
		List<JavaBeanT> territorios;
		territorios = null;
		switch (usuario.getNivel()) {
		case DFEDERAL:
			territorios = sqlSession.selectList("catalogos.dFederales.listadoPorUsuario", usuario);
			break;
		case DLOCAL:
			territorios = sqlSession.selectList("catalogos.dLocales.listadoPorUsuario", usuario);
			break;
		case ENTIDAD:
			territorios = sqlSession.selectList("catalogos.entidades.listadoPorUsuario", usuario);
			break;
		case GEOZONA:
			territorios = sqlSession.selectList("catalogos.geozonas.listadoPorUsuario", usuario);
			break;
		case LOCALIDAD:
			break;
		case MANZANA:
			break;
		case MUNICIPIO:
			territorios = sqlSession.selectList("catalogos.municipios.listadoPorUsuario", usuario);
			break;
		case NACIONAL:
			break;
		case SECCION:
			break;
		}

		if (territorios == null)
			usuario.setTerritorios(new ArrayList<JavaBeanT>());
		else
			usuario.setTerritorios(territorios);
	}
	
	public void cargarDependencias(UsuarioEO usuario){
		List<DependenciaEO> listado;
		
		listado = sqlSession.selectList("catalogos.dependencias.listadoPorUsuario", usuario);
		usuario.setDependencias(listado);
	}

	public Modelo<UsuarioEO> modelo() {

		Modelo<UsuarioEO> modelo;
		List<UsuarioEO> listado;

		listado = sqlSession.selectList("administracion.usuarios.listado");

		// Cargar Información complementaria
		for(UsuarioEO usuario : listado){
			cargarTerritorios(usuario);
			cargarDependencias(usuario);
		}

		logger.debug("listadoUsuarios: {}", listado);

		modelo = new Modelo<>();
		modelo.setListado(listado);

		if (!listado.isEmpty()) {
			modelo.setSeleccionado(listado.get(0));
		}

		logger.debug("modeloUsuarios: {}", modelo);

		return modelo;
	}

	public Modelo<JavaBeanT> modeloTerritorios(UsuarioEO usuario) {
		Modelo<JavaBeanT> modelo;

		modelo = new Modelo<>();

		modelo.setListado(usuario.getTerritorios());
		if (!usuario.getTerritorios().isEmpty()) {
			modelo.setSeleccionado(usuario.getTerritorios().get(0));
		}

		return modelo;
	}

	public void limpiarTerritorios(UsuarioEO usuario) {
		usuario.setTerritorios(new ArrayList<JavaBeanT>());
	}

	public UsuarioEO nuevoUsuario() {
		UsuarioEO usuario;

		usuario = new UsuarioEO();

		return usuario;
	}

	public void agregarRol(UsuarioEO usuario, RolEO rol) {
		if (rol != null) {
			if (!usuario.getRoles().contains(rol)) {
				usuario.getRoles().add(rol);
			}
		}
	}

	public void quitarRol(UsuarioEO usuario, RolEO rol) {
		if (rol != null) {
			usuario.getRoles().remove(rol);
		}
	}

	public void agregarTerritorios(UsuarioEO usuario, List<JavaBeanT> entidades, List<JavaBeanT> dfederales,
			List<JavaBeanT> dlocales, List<JavaBeanT> municipios, JavaBeanT geozona) {
		switch (usuario.getNivel()) {
		case DFEDERAL:
			usuario.setTerritorios(dfederales);
			break;
		case DLOCAL:
			usuario.setTerritorios(dlocales);
			break;
		case ENTIDAD:
			usuario.setTerritorios(entidades);
			break;
		case GEOZONA:
			List<JavaBeanT> geozonas;
			geozonas = new ArrayList<>();
			geozonas.add(geozona);
			usuario.setTerritorios(geozonas);
			break;
		case LOCALIDAD:
			break;
		case MANZANA:
			break;
		case MUNICIPIO:
			usuario.setTerritorios(municipios);
			break;
		case NACIONAL:
			break;
		case SECCION:
			break;
		}
	}
	
	public Modelo<DependenciaEO> modeloDependencias(UsuarioEO usuario){
		Modelo<DependenciaEO> modelo;
		
		modelo = new Modelo<>();
		modelo.setListado(usuario.getDependencias());
		if(!usuario.getDependencias().isEmpty()){
			modelo.setSeleccionado(usuario.getDependencias().get(0));
		}
		
		return modelo;
	}
	
	public void agregarDependencia(UsuarioEO usuario, DependenciaEO dependencia){
		if(dependencia != null){
			if(!usuario.getDependencias().contains(dependencia)){
				usuario.getDependencias().add(dependencia);
			}
		}
	}
	
	public void quitarDependencia(UsuarioEO usuario, DependenciaEO dependencia){
		if (dependencia != null) {
			usuario.getDependencias().remove(dependencia);
		}
	}
	
	public void insertarActualizar(UsuarioEO usuario) {
		logger.debug("Usuario recibido: {}", usuario);
		if (usuario.getId() == null) {
			sqlSession.insert("administracion.usuarios.insertar", usuario);
		} else {
			sqlSession.update("administracion.usuarios.actualizar", usuario);
		}

		sqlSession.delete("administracion.roles.eliminarAutorizacionesPorUsuario", usuario);
		sqlSession.insert("administracion.roles.insertarAutorizacionesPorUsuario", usuario);

		sqlSession.delete("administracion.usuarios.eliminarTerritoriosPorUsuario", usuario);
		sqlSession.insert("administracion.usuarios.insertarTerritorios", usuario);
		
		sqlSession.delete("administracion.usuarios.eliminarDependenciasPorUsuario", usuario);
		sqlSession.insert("administracion.usuarios.insertarDependencias", usuario);
	}

}
