package com.saganet.politik.components.eventos;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.ibatis.session.SqlSession;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultScheduleEvent;
import org.primefaces.model.DefaultScheduleModel;
import org.primefaces.model.ScheduleModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.saganet.politik.components.catalogos.GeozonasC;
import com.saganet.politik.database.catalogos.DFederalEO;
import com.saganet.politik.database.catalogos.DLocalEO;
import com.saganet.politik.database.catalogos.EntidadEO;
import com.saganet.politik.database.catalogos.GeozonaEO;
import com.saganet.politik.database.catalogos.GeozonaParticionEO;
import com.saganet.politik.database.catalogos.LocalidadEO;
import com.saganet.politik.database.catalogos.ManzanaEO;
import com.saganet.politik.database.catalogos.MunicipioEO;
import com.saganet.politik.database.catalogos.SeccionEO;
import com.saganet.politik.database.eventos.CalendarioEventoSocialEO;
import com.saganet.politik.database.eventos.EventoSocialEO;
import com.saganet.politik.dominios.EstatusEventoDO;
import com.saganet.politik.dominios.NivelesDO;
import com.saganet.politik.dominios.TipoEventoDO;
import com.saganet.politik.modelos.JavaBeanT;
import com.saganet.politik.modelos.Modelo;
import com.saganet.politik.utilidades.eventos.FiltrosMapa;

@Component("EventosSocialesC")
public class EventosSocialesC {
	private static final Logger logger = LoggerFactory.getLogger(EventosSocialesC.class);

	@Autowired
	SqlSession sqlSession;
	
	@Autowired
	GeozonasC geozonaC;

	public Modelo<EventoSocialEO> tablaEventosSociales(EventoSocialEO eventoSeleccionado) {
		Modelo<EventoSocialEO> tabla = new Modelo<>();
		List<EventoSocialEO> listado = new ArrayList<>();
		List<JavaBeanT> territorios = new ArrayList<>();
		listado = sqlSession.selectList("eventos.eventos.listado");
		logger.debug("El listado es {}", listado);
		for (EventoSocialEO eventoSocial : listado) {
			logger.debug("El nivel es {}", eventoSocial.getNivel());
			switch (eventoSocial.getNivel()) {
			case NACIONAL:
				logger.debug("Todo El País");
				territorios = new ArrayList<>();
				break;
			case ENTIDAD:
				territorios = sqlSession.selectList("catalogos.entidades.listadoEvento", eventoSocial);
				break;
			case MUNICIPIO:
				territorios = sqlSession.selectList("catalogos.municipios.listadoEvento", eventoSocial);
				break;
			case DFEDERAL:
				territorios = sqlSession.selectList("catalogos.dFederales.listadoEvento", eventoSocial);
				break;
			case DLOCAL:
				territorios = sqlSession.selectList("catalogos.dLocales.listadoEvento", eventoSocial);
				break;
			case GEOZONA:
				territorios = sqlSession.selectList("catalogos.geozonas.listadoEvento", eventoSocial);
				break;
			default:
				break;
			}
			eventoSocial.setTerritorios(territorios);
		}

		tabla.setListado(listado);
		if (eventoSeleccionado != null) {
			tabla.setSeleccionado(eventoSeleccionado);
		} else if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	public EventoSocialEO crearEventoSocial() {
		EventoSocialEO eventoSocial = new EventoSocialEO();
		List<JavaBeanT> territorios = new ArrayList<>();
		eventoSocial.setTerritorios(territorios);
		eventoSocial.setNumeroAsistentes(0);
		eventoSocial.setEstatus(EstatusEventoDO.PROGRAMADO);
		eventoSocial.setNivel(NivelesDO.NACIONAL);
		Date date = new Date();
		eventoSocial.setFechaString(date);
		eventoSocial.setFechaStringFin(date);
		return eventoSocial;
	}

	public EventoSocialEO nuevoEventoSocial(EventoSocialEO eventoSocial, boolean bandera, GeozonaEO geozona) {

		logger.debug("El evento recibido es {}", eventoSocial);
		Integer id = sqlSession.selectOne("eventos.eventos.nuevoID");
		eventoSocial.setId(id);
		if (bandera) {
			eventoSocial.setNivel(geozona.getNivel());
		}
		if (eventoSocial.getFechaFin() == null) {
			eventoSocial.setFechaFin(eventoSocial.getFecha());
		}
		sqlSession.insert("eventos.eventos.agregar", eventoSocial);
		for (JavaBeanT territorio : eventoSocial.getTerritorios()) {
			HashMap<String, Object> mapa = new HashMap<>();
			mapa.put("idEvento", eventoSocial.getId());
			switch (eventoSocial.getNivel()) {
			case ENTIDAD:
				mapa.put("llave", ((EntidadEO) territorio).getLlave());
				break;
			case MUNICIPIO:
				mapa.put("llave", ((MunicipioEO) territorio).getLlave());
				break;
			case DFEDERAL:
				mapa.put("llave", ((DFederalEO) territorio).getLlave());
				break;
			case DLOCAL:
				mapa.put("llave", ((DLocalEO) territorio).getLlave());
				break;
			case GEOZONA:
				mapa.put("llave", ((GeozonaParticionEO) territorio).getLlave());
				break;
			default:
				break;
			}
			sqlSession.insert("eventos.eventos.agregarllaves", mapa);
		}

		return eventoSocial;
	}

	public void eliminarEventoSocial(EventoSocialEO eventoSocial) {
		logger.debug("Evento {}", eventoSocial);
		sqlSession.delete("eventos.eventos.eliminar", eventoSocial);
		sqlSession.delete("eventos.eventos.eliminarllaves", eventoSocial);
	}

	public NivelesDO[] listadoNiveles() {
		NivelesDO[] listado = new NivelesDO[4];
		listado[0] = NivelesDO.NACIONAL;
		listado[1] = NivelesDO.ENTIDAD;
		listado[2] = NivelesDO.MUNICIPIO;
		listado[3] = NivelesDO.GEOZONA;
		return listado;
	}

	public EstatusEventoDO[] listadoEstatus() {
		return EstatusEventoDO.values();
	}

	public TipoEventoDO[] listadoTipo() {
		logger.debug("Lsitado Tipos {}", TipoEventoDO.values()[0]);
		return TipoEventoDO.values();
	}

	// public Modelo<JavaBeanT> obtenerTabla(S) {
	// Modelo<JavaBeanT> tabla=new Modelo<>();
	// List<JavaBeanT> listado=new ArrayList<>();
	//
	// }

	public Modelo<JavaBeanT> nivelTerritorio(NivelesDO nivel, List<EntidadEO> entidades) {
		Modelo<JavaBeanT> tabla = new Modelo<>();
		List<JavaBeanT> listado = new ArrayList<>();
		logger.debug("Entidades {} Nivel {} ", entidades, nivel);
		if (entidades == null || entidades.isEmpty()) {
			entidades = new ArrayList<>();
		}
		switch (nivel) {
		case MUNICIPIO:
			listado = sqlSession.selectList("catalogos.municipios.listadoPorEntidades", entidades);
			break;
		case DFEDERAL:
			listado = sqlSession.selectList("catalogos.dFederales.listadoPorEntidades", entidades);
			break;
		case DLOCAL:
			listado = sqlSession.selectList("catalogos.dLocales.listadoPorEntidades", entidades);
			break;
		default:
			break;
		}
		logger.debug("El listado de nivel es {}", listado);
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	public Modelo<GeozonaEO> tablaGeozonas() {
		Modelo<GeozonaEO> tabla = new Modelo<>();
		List<GeozonaEO> listado = new ArrayList<>();
		listado = sqlSession.selectList("catalogos.geozonas.listado");
		logger.debug("El listado {}", listado);
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	public Modelo<GeozonaParticionEO> crearModeloParticiones(List<GeozonaParticionEO> particiones) {
		logger.debug("Particiones {}", particiones);
		Modelo<GeozonaParticionEO> tabla = new Modelo<>();
		List<GeozonaParticionEO> listado = particiones;
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	public Modelo<JavaBeanT> territoriosSubnivel(GeozonaEO geozona, List<GeozonaParticionEO> particiones) {
		Modelo<JavaBeanT> tabla = new Modelo<>();
		List<JavaBeanT> listado = new ArrayList<>();
		if (!particiones.isEmpty()) {
			switch (geozona.getNivel()) {
			case ENTIDAD:
				listado = sqlSession.selectList("catalogos.entidades.listadoPorGeozonaParticionesLlaves", particiones);
				break;
			case MUNICIPIO:
				listado = sqlSession.selectList("catalogos.municipios.listadoPorGeozonaParticionesLlaves", particiones);
				break;
			default:
				break;
			}
		}

		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	public Modelo<JavaBeanT> tablaCalendario() {
		Modelo<JavaBeanT> tabla = new Modelo<>();
		List<JavaBeanT> listado = new ArrayList<>();
		listado = sqlSession.selectList("eventos.calendarioEventos.listado");
		tabla.setListado(listado);
		for (JavaBeanT cal : listado) {
			CalendarioEventoSocialEO calendario = (CalendarioEventoSocialEO) cal;
			logger.debug("Calendario {}", calendario);
			calendario.setId((int) (Math.random() * 100));
			cal = calendario;
		}
		return tabla;
	}

	public ScheduleModel calendario(List<CalendarioEventoSocialEO> listado) {
		ScheduleModel modelo = null;
		modelo = new DefaultScheduleModel();
		logger.debug("El listadoes {}", listado);
		for (CalendarioEventoSocialEO calendarioEventoSocialEO : listado) {
			Date fechaInicio = new Date(calendarioEventoSocialEO.getFecha().getTime());
			Date fechaFinDate = new Date(calendarioEventoSocialEO.getFechaFin().getTime());
			if (!fechaInicio.equals(fechaFinDate)) {
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(fechaFinDate);
				calendar.add(Calendar.DAY_OF_YEAR, 1);
				fechaFinDate = calendar.getTime();
			}
			modelo.addEvent(new DefaultScheduleEvent("   " + calendarioEventoSocialEO.getConteo() + "  Evento(s)",
					fechaInicio, fechaFinDate));
		}
		return modelo;
	}

	String fecha = new String("");

	public void onDateSelect(SelectEvent selectEvent) {
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
		Date fechaDate = ((Date) selectEvent.getObject());
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(fechaDate);
		calendar.add(Calendar.DAY_OF_YEAR, 1);
		fechaDate = calendar.getTime();
		fecha = formatter.format(fechaDate);
		logger.debug("La fecha es {} con formato es {}", fechaDate, fecha);
	}

	public Modelo<EventoSocialEO> tablaEventosSocialesCalendario() {
		Modelo<EventoSocialEO> tabla = new Modelo<>();
		List<EventoSocialEO> listado = new ArrayList<>();
		List<JavaBeanT> territorios = new ArrayList<>();
		logger.debug("El fecha es listado {}", fecha);
		if (!fecha.equals("")) {
			listado = sqlSession.selectList("eventos.eventos.buscarPorFecha", fecha);
			logger.debug("El listado es {}", listado);
			for (EventoSocialEO eventoSocial : listado) {
				logger.debug("El nivel es {}", eventoSocial.getNivel());
				switch (eventoSocial.getNivel()) {
				case NACIONAL:
					logger.debug("Todo El País");
					territorios = new ArrayList<>();
					break;
				case ENTIDAD:
					territorios = sqlSession.selectList("catalogos.entidades.listadoEvento", eventoSocial);
					break;
				case MUNICIPIO:
					territorios = sqlSession.selectList("catalogos.municipios.listadoEvento", eventoSocial);
					break;
				case DFEDERAL:
					territorios = sqlSession.selectList("catalogos.dFederales.listadoEvento", eventoSocial);
					break;
				case DLOCAL:
					territorios = sqlSession.selectList("catalogos.dLocales.listadoEvento", eventoSocial);
					break;
				case GEOZONA:
					territorios = sqlSession.selectList("catalogos.geozonas.listadoEvento", eventoSocial);
					break;
				default:
					break;
				}
				eventoSocial.setTerritorios(territorios);
			}
		}

		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	public void actualizarEstatus(EventoSocialEO evento) {
		logger.debug("El evento a actualizar {}-{} a el estatus {}", evento.getId(), evento.getNombre(),
				evento.getEstatus().getNombre());
		sqlSession.update("eventos.eventos.actualizarEstatus", evento);
	}

	public Modelo<EventoSocialEO> tablaEventosSocialesRealizados(EventoSocialEO eventoSeleccionado) {
		Modelo<EventoSocialEO> tabla = new Modelo<>();
		List<EventoSocialEO> listado = new ArrayList<>();
		List<JavaBeanT> territorios = new ArrayList<>();
		listado = sqlSession.selectList("eventos.eventos.listadoRealizados");
		logger.debug("El listado es {}", listado);
		for (EventoSocialEO eventoSocial : listado) {
			logger.debug("El nivel es {}", eventoSocial.getNivel());
			switch (eventoSocial.getNivel()) {
			case NACIONAL:
				logger.debug("Todo El País");
				territorios = new ArrayList<>();
				break;
			case ENTIDAD:
				territorios = sqlSession.selectList("catalogos.entidades.listadoEvento", eventoSocial);
				break;
			case MUNICIPIO:
				territorios = sqlSession.selectList("catalogos.municipios.listadoEvento", eventoSocial);
				break;
			case DFEDERAL:
				territorios = sqlSession.selectList("catalogos.dFederales.listadoEvento", eventoSocial);
				break;
			case DLOCAL:
				territorios = sqlSession.selectList("catalogos.dLocales.listadoEvento", eventoSocial);
				break;
			case GEOZONA:
				territorios = sqlSession.selectList("catalogos.geozonas.listadoEvento", eventoSocial);
				break;
			default:
				break;
			}
			eventoSocial.setTerritorios(territorios);
		}

		tabla.setListado(listado);
		if (eventoSeleccionado != null) {
			tabla.setSeleccionado(eventoSeleccionado);
		} else if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}

	// Inicio: Funciones para Mapa de Eventos
	public FiltrosMapa nuevoFiltros() {
		FiltrosMapa filtros;

		filtros = new FiltrosMapa();

		return filtros;
	}

	public HashMap<String, Object> nuevoModeloMapa() {
		HashMap<String, Object> parametros;
		String inicio, actualizar;

		parametros = new HashMap<>();
		inicio = "iniciarMapaNacional('formMapaEventos:tabView:panelMapa');";
		actualizar = "";

		parametros.put("inicio", inicio);
		parametros.put("actualizar", actualizar);
		parametros.put("eventos", new ArrayList<EventoSocialEO>());

		return parametros;
	}

	public HashMap<String, Object> modeloMapa(FiltrosMapa filtros) {
		HashMap<String, Object> parametros;
		List<EventoSocialEO> eventos, auxEventos;
		StringBuilder actualizar;
		Set<String> llaves;
		String auxComa;

		parametros = new HashMap<>();
		actualizar = new StringBuilder();
		llaves = new HashSet<>();

		logger.debug("Parametros Recibidos: {}", filtros);

		eventos = sqlSession.selectList("eventos.eventos.porFiltros", filtros);
		auxEventos = new ArrayList<>();
		auxEventos.addAll(eventos);
		
		parametros.put("eventos", eventos);
		logger.debug("Eventos obtenidos: {}", eventos.size());
		
		for(EventoSocialEO evento : eventos){
			cargarTerritorios(evento);
		}
		
		actualizar.append("quitarCapa(1);\n");
		actualizar.append("quitarCapa(1);\n");

		switch (filtros.getNivel()) {
		case DFEDERAL:
			break;
		case DLOCAL:
			break;
		case MUNICIPIO:
			// dejar solo eventos de la Entidad seleccionada
			for (EventoSocialEO evento : auxEventos) {
				if (quitarEvento(filtros.getEntidad(), evento))
					eventos.remove(evento);
			}
			
			//Pintar los Municipios donde haya evento
			for (EventoSocialEO evento : eventos) {
				for (JavaBeanT t : evento.getTerritorios()) {
					//logger.debug("{}", t.getClass().getSimpleName());
					llaves.addAll(obtenerLlaves(NivelesDO.MUNICIPIO, t));
				}
			}

			actualizar.append("actualizarMapa([");
			actualizar.append(filtros.getEntidad().getGeoData().getBounds());
			actualizar.append("]);\n");
			actualizar.append("agregarCapa('politik:municipios', '', 'id_entidad = ");
			actualizar.append(filtros.getEntidad().getLlave());
			actualizar.append("');\n");
			actualizar.append("agregarCapa('politik:municipios', 'poligono_rojo', \"llave in (");
			auxComa = "";
			for(String l : llaves){
				actualizar.append(auxComa);
				actualizar.append("'");
				actualizar.append(l);
				actualizar.append("'");
				auxComa = ",";
			}
			actualizar.append(")\");\n");
			break;
		case GEOZONA:
			break;
		case ENTIDAD:
			actualizar.append("actualizarMapa([-118.454994376215, 14.5330668762905, -86.712489103835, 32.7220212408026]);\n");
			actualizar.append("agregarCapa('politik:entidades', 'poligono_rojo', 'id_entidad in (");
			for (EventoSocialEO evento : eventos) {
				for (JavaBeanT t : evento.getTerritorios()) {
					//logger.debug("{}", t.getClass().getSimpleName());
					llaves.addAll(obtenerLlaves(NivelesDO.ENTIDAD, t));
				}
			}
			auxComa = "";
			for(String l : llaves){
				actualizar.append(auxComa);
				actualizar.append(l);
				auxComa = ",";
			}
			actualizar.append(")');\n");
			break;
		}
		//logger.debug("Llaves obtenidas: {}", llaves);

		parametros.put("actualizar", actualizar.toString());

		return parametros;
	}
	
	private boolean quitarEvento(JavaBeanT territorio, EventoSocialEO evento){
		boolean respuesta;
		List<JavaBeanT> territorios;
		String claseTerritorioEvento;
		
		respuesta = false;
		territorios = evento.getTerritorios();
		claseTerritorioEvento = null;
		
		if(!territorios.isEmpty()){
			claseTerritorioEvento = territorios.get(0).getClass().getSimpleName();
		}
		
		for(JavaBeanT t : territorios){
			//logger.debug("territorio a verificar: {}", t);
			switch(claseTerritorioEvento){
			case "EntidadEO":
				respuesta |= ((EntidadEO) t).contieneTerritorio(territorio);
				break;
			case "DFederalEO":
				respuesta |= ((DFederalEO) t).contieneTerritorio(territorio);
				break;
			case "DLocalEO":
				respuesta |= ((DLocalEO) t).contieneTerritorio(territorio);
				break;
			case "MunicipioEO":
				respuesta |= ((MunicipioEO) t).contieneTerritorio(territorio);
				break;
			case "SeccionEO":
				respuesta |= ((SeccionEO) t).contieneTerritorio(territorio);
				break;
			case "LocalidadEO":
				respuesta |= ((LocalidadEO) t).contieneTerritorio(territorio);
				break;
			case "ManzanaEO":
				respuesta |= ((ManzanaEO) t).contieneTerritorio(territorio);
				break;
			case "GeozonaParticionEO":
				respuesta |= ((GeozonaParticionEO) t).contieneTerritorio(territorio);
				break;
			}
		}
		
		return !respuesta;
	}
	
	private List<String> obtenerLlaves(NivelesDO nivel, JavaBeanT territorio){
		List<String> llaves;
		//logger.debug("ObtenerLlaves: {} - {}", nivel, territorio);
		
		llaves = new ArrayList<>();
		
		switch(nivel){
		case DFEDERAL:
			break;
		case DLOCAL:
			break;
		case ENTIDAD:
			switch(territorio.getClass().getSimpleName()){
			case "EntidadEO":
				llaves.add(((EntidadEO)territorio).getLlave());
				break;
			case "MunicipioEO":
				llaves.add(((MunicipioEO)territorio).getEntidad().getLlave());
				break;
			case "DFederalEO":
				llaves.add(((DFederalEO)territorio).getEntidad().getLlave());
				break;
			case "DLocalEO":
				llaves.add(((DLocalEO)territorio).getEntidad().getLlave());
				break;
			case "SeccionEO":
				llaves.add(((SeccionEO)territorio).getEntidad().getLlave());
				break;
			case "LocalidadEO":
				llaves.add(((LocalidadEO)territorio).getMunicipio().getEntidad().getLlave());
				break;
			case "ManzanaEO":
				llaves.add(((ManzanaEO)territorio).getSeccion().getEntidad().getLlave());
				break;
			case "GeozonaParticionEO":
				for(JavaBeanT t : ((GeozonaParticionEO)territorio).getTerritorios()){
					llaves.addAll(obtenerLlaves(nivel, t));
				}
				break;
			}
			break;
		case GEOZONA:
			break;
		case LOCALIDAD:
			break;
		case MANZANA:
			break;
		case MUNICIPIO:
			switch(territorio.getClass().getSimpleName()){
			case "EntidadEO":
			case "DFederalEO":
			case "DLocalEO":
				break;
			case "MunicipioEO":
				llaves.add(((MunicipioEO)territorio).getLlave());
				break;
			case "SeccionEO":
				llaves.add(((SeccionEO)territorio).getMunicipio().getLlave());
				break;
			case "LocalidadEO":
				llaves.add(((LocalidadEO)territorio).getMunicipio().getLlave());
				break;
			case "ManzanaEO":
				llaves.add(((ManzanaEO)territorio).getSeccion().getMunicipio().getLlave());
				break;
			case "GeozonaParticionEO":
				for(JavaBeanT t : ((GeozonaParticionEO)territorio).getTerritorios()){
					llaves.addAll(obtenerLlaves(nivel, t));
				}
				break;
			}
			break;
		case NACIONAL:
			break;
		case SECCION:
			break;
		}
		
		return llaves;
	}

	private void cargarTerritorios(EventoSocialEO evento) {
		List<JavaBeanT> territorios;
		
		logger.debug("El nivel es {}", evento.getNivel());
		territorios = new ArrayList<>();
		
		switch (evento.getNivel()) {
		case NACIONAL:
			logger.debug("Todo El País");
			territorios = new ArrayList<>();
			break;
		case ENTIDAD:
			territorios = sqlSession.selectList("catalogos.entidades.listadoEvento", evento);
			break;
		case MUNICIPIO:
			territorios = sqlSession.selectList("catalogos.municipios.listadoEvento", evento);
			break;
		case DFEDERAL:
			territorios = sqlSession.selectList("catalogos.dFederales.listadoEvento", evento);
			break;
		case DLOCAL:
			territorios = sqlSession.selectList("catalogos.dLocales.listadoEvento", evento);
			break;
		case GEOZONA:
			territorios = sqlSession.selectList("catalogos.geozonas.listadoEvento", evento);
			for(JavaBeanT particion : territorios){
				geozonaC.cargarTerritoriosParticion(((GeozonaParticionEO)particion));
			}
			break;
		default:
			break;
		}
		evento.setTerritorios(territorios);
	}
	
	@SuppressWarnings("unchecked")
	public Modelo<EventoSocialEO> modeloEventosMapa(HashMap<String, Object> modeloMapa){
		Modelo<EventoSocialEO> modelo;
		
		modelo = new Modelo<>();
		
		modelo.setListado((List<EventoSocialEO>) modeloMapa.get("eventos"));
		if(!modelo.getListado().isEmpty()){
			modelo.setSeleccionado(modelo.getListado().get(0));
		}
		
		return modelo;
	}
	// Fin: Funciones para Mapa de Eventos
}
