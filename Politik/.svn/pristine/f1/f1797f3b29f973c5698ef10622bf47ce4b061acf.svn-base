package com.saganet.politik;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.saganet.politik.database.biblioteca.ParametrosEstadisticas;
import com.saganet.politik.database.biblioteca.ReportesParametros;
import com.saganet.politik.database.encuestas.admin.PreguntaEO;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@Autowired
	private ReportesParametros parametrosReportes;
	@Autowired
	private ParametrosEstadisticas parametrosEstadisticas;
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "home";
	}
	
	
	 @RequestMapping(value="/descargaArchivo.saga", method={RequestMethod.POST,RequestMethod.GET})
     public void generateReport(HttpServletRequest request, 
HttpServletResponse response) throws IOException{
		 String nombreArchivo;
		
		 StringTokenizer st;
		 logger.debug("Hola desde descargaArchivo.htm");
		 
		 String filePathToBeServed;
		 File fileToDownload;
		 InputStream inputStream;
		 
		 nombreArchivo = parametrosReportes.getAr().getName();
		 st = new StringTokenizer(parametrosReportes.getAr().getName(), ".");
		 
		  try {
	    	
	    	//logger.debug("Ruta {} " + ruta);
	        
	        filePathToBeServed  =  parametrosReportes.getAr().getAbsolutePath();//complete file name with path;
	        fileToDownload = new File(filePathToBeServed);
	       
	        inputStream = new FileInputStream(fileToDownload);
	        if (st.countTokens() > 1) {
	        	st.nextToken();
				String token = st.nextToken();
	       switch(token){
	       case "pdf": 
	      
	        	 response.setHeader("Content-Type", "application/pdf");	
	        break;
	       case "txt":
	        	 response.setHeader("Content-Type", "text/plain");
	        	 break;
	       case "png":
	    	   response.setHeader("Content-Type", "image/png"); 
	    	   break;
	    	  	
	       case "jpg":
	    	   response.setHeader("Content-Type", "image/jpg"); 
	    	   break;
	       default:
	        response.setHeader("Content-Type", "application/force-download");
	        
	       }
	        }
			response.setHeader("Content-Disposition", "inline; filename=\"" + nombreArchivo + "\"");
	       /* 
	        response.setContentType("application/pdf");
	        response.setHeader("Content-Disposition", "attachment; filename=listado_1_2.pdf"); */
	        IOUtils.copy(inputStream, response.getOutputStream());
	        response.flushBuffer();
	        inputStream.close();
	    } catch (Exception e){
	    	filePathToBeServed ="C:\\reportes\\no_encontrado.png";
	    	 fileToDownload = new File(filePathToBeServed);
		     try {
				inputStream = new FileInputStream(fileToDownload);
				 response.setHeader("Content-Type", "image/png");
					response.setHeader("Content-Disposition", "inline; filename=\"error.png");
					IOUtils.copy(inputStream, response.getOutputStream());
			        response.flushBuffer();
			        inputStream.close();
			} catch ( IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
	       // logger.debug("Request could not be completed at this moment. Please try again.");
	        e.printStackTrace();
	        e.getCause();
	    }
	    
		 
	 }
	 
	 @RequestMapping(value="/estadisticaEncuesta.saga", method={RequestMethod.POST,RequestMethod.GET})
     public void mostrarEstadisticaEncuesta(HttpServletRequest request, 
HttpServletResponse response) throws IOException{
		 HashMap<String, Object> parametros;
		 String filePathToBeServed;
		 File fileToDownload;
		 String nombreArchivo;
		 InputStream inputStream;
		 List<File> li;
		 logger.debug("Es mayo", request);
		 
		   JasperReport jasperReport;
		   li = new ArrayList<>();
		try {
			FileOutputStream fos = new FileOutputStream("C:\\Users\\User\\JaspersoftWorkspace\\EjemplosPolitik\\estadisticas.zip");
			ZipOutputStream zos = new ZipOutputStream(fos);
			
			
			
			jasperReport = JasperCompileManager.compileReport("C:\\Users\\User\\JaspersoftWorkspace\\EjemplosPolitik\\uno.jrxml");
			logger.debug("recibido: {}", parametrosEstadisticas.getPreguntasEncuesta());
			for(PreguntaEO pregunta : parametrosEstadisticas.getPreguntasEncuesta()){
				logger.debug("recibido: {}", pregunta);
				
			parametros =  new HashMap<String, Object>();
			parametros.put("titulo", pregunta.getConsecutivoPregunta()+".- "+ pregunta.getPregunta());
			
			
			 JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport,parametros, new JREmptyDataSource());
			    JasperExportManager.exportReportToPdfFile(jasperPrint, "C:\\Users\\User\\JaspersoftWorkspace\\EjemplosPolitik\\p_"+pregunta.getId()+".pdf");
			    File ar = new File("C:\\Users\\User\\JaspersoftWorkspace\\EjemplosPolitik\\p_"+pregunta.getId()+".pdf");
			    li.add(ar);
			    
			   
			}
			logger.debug("tamanio: {}", li.size());
			zipFile(li, "C:\\Users\\User\\JaspersoftWorkspace\\EjemplosPolitik\\estadisticas.zip");
			zos.close();
			fos.close();
			
			 filePathToBeServed  =  "C:\\Users\\User\\JaspersoftWorkspace\\EjemplosPolitik\\estadisticas.zip";//complete file name with path;
		        nombreArchivo="estadisticas.zip";
			    fileToDownload = new File(filePathToBeServed);		       
		        inputStream = new FileInputStream(fileToDownload);
		        response.setHeader("Content-Type", "application/force-download");
		        response.setHeader("Content-Disposition", "inline; filename=\"" + nombreArchivo + "\"");
		        IOUtils.copy(inputStream, response.getOutputStream());
		        inputStream.close();
		        filePathToBeServed="";
		        nombreArchivo="";
			 response.flushBuffer();
		      
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		   
		

	 }
	 
	    public static void zipFile(List<File> inputFile, String zipFilePath) {
            try {
            	logger.debug("dddd:{}", inputFile);
                FileOutputStream fileOutputStream = new FileOutputStream(zipFilePath);
                ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream);
              
                for(File inputFil:inputFile){
                	  ZipEntry zipEntry = new ZipEntry(inputFil.getName());
                      zipOutputStream.putNextEntry(zipEntry);
                	logger.debug("entro:{}", inputFil);
                	FileInputStream fileInputStream = new FileInputStream(inputFil);
                	logger.debug("DDFF:{}",fileInputStream);
                	
                byte[] buf = new byte[1024000];
                int bytesRead;
                while ((bytesRead = fileInputStream.read(buf)) > 0) {
             zipOutputStream.write(buf, 0, bytesRead);
             zipOutputStream.closeEntry();
                    }
              
            }
      zipOutputStream.close();
         fileOutputStream.close();
      System.out.println("Regular file :" + inputFile+" is zipped to archive :"+zipFilePath);
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
}
