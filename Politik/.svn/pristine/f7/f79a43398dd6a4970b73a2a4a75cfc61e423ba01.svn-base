package com.saganet.politik.components.eventos;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.saganet.politik.database.catalogos.DFederalEO;
import com.saganet.politik.database.catalogos.DLocalEO;
import com.saganet.politik.database.catalogos.EntidadEO;
import com.saganet.politik.database.catalogos.GeozonaEO;
import com.saganet.politik.database.catalogos.GeozonaParticionEO;
import com.saganet.politik.database.catalogos.MunicipioEO;
import com.saganet.politik.database.eventos.EventoSocialEO;
import com.saganet.politik.dominios.EstatusEventoDO;
import com.saganet.politik.dominios.NivelesDO;
import com.saganet.politik.dominios.TipoEventoDO;
import com.saganet.politik.modelos.JavaBeanT;
import com.saganet.politik.modelos.Modelo;

@Component("EventosSocialesC")
public class EventosSocialesC {
	private static final Logger logger = LoggerFactory.getLogger(EventosSocialesC.class);

	@Autowired
	SqlSession sqlSession;
	
	public Modelo<EventoSocialEO> tablaEventosSociales(EventoSocialEO eventoSeleccionado) {
		Modelo<EventoSocialEO> tabla =new Modelo<>();
		List<EventoSocialEO> listado=new ArrayList<>();
		List<JavaBeanT> territorios=new ArrayList<>();
		listado=sqlSession.selectList("eventos.eventos.listado");
		logger.debug("El listado es {}",listado);
		for (EventoSocialEO eventoSocial : listado) {
			logger.debug("El nivel es {}",eventoSocial.getNivel());
			switch (eventoSocial.getNivel()) {
				case NACIONAL:
					logger.debug("Todo El País");
					territorios=new ArrayList<>();
				break;
				case ENTIDAD:
					territorios=sqlSession.selectList("catalogos.entidades.listadoEvento",eventoSocial);
				break;
				case MUNICIPIO:
					territorios=sqlSession.selectList("catalogos.municipios.listadoEvento",eventoSocial);
				break;
				case DFEDERAL:
					territorios=sqlSession.selectList("catalogos.dFederales.listadoEvento",eventoSocial);
				break;
				case DLOCAL:
					territorios=sqlSession.selectList("catalogos.dLocales.listadoEvento",eventoSocial);
				break;
				case GEOZONA:
					territorios=sqlSession.selectList("catalogos.geozonas.listadoEvento",eventoSocial);
				break;
				default:
				break;
			}
			eventoSocial.setTerritorios(territorios);
		}
		
		tabla.setListado(listado);
		if (eventoSeleccionado!=null) {
			tabla.setSeleccionado(eventoSeleccionado);
		}
		else if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}
	
	public EventoSocialEO crearEventoSocial() {
		EventoSocialEO eventoSocial = new EventoSocialEO();
		List<JavaBeanT> territorios=new ArrayList<>();
		eventoSocial.setTerritorios(territorios);
		eventoSocial.setNumeroAsistentes(0);
		eventoSocial.setEstatus(EstatusEventoDO.PROGRAMADO);
		eventoSocial.setNivel(NivelesDO.NACIONAL);
		return eventoSocial;
	}
	public EventoSocialEO nuevoEventoSocial (EventoSocialEO eventoSocial, boolean bandera, GeozonaEO geozona) {
		
		logger.debug("El evento recibido es {}",eventoSocial);
		Integer id=sqlSession.selectOne("eventos.eventos.nuevoID");
		eventoSocial.setId(id);
		if (bandera) {
			eventoSocial.setNivel(geozona.getNivel());
		}
		sqlSession.insert("eventos.eventos.agregar",eventoSocial);
		for (JavaBeanT territorio : eventoSocial.getTerritorios()) {
			HashMap<String, Object> mapa=new HashMap<>();
			mapa.put("idEvento", eventoSocial.getId());
			switch (eventoSocial.getNivel()) {
				case ENTIDAD:
					mapa.put("llave", ((EntidadEO)territorio).getLlave());
				break;
				case MUNICIPIO:
					mapa.put("llave", ((MunicipioEO)territorio).getLlave());
				break;
				case DFEDERAL:
					mapa.put("llave", ((DFederalEO)territorio).getLlave());
				break;
				case DLOCAL:
					mapa.put("llave", ((DLocalEO)territorio).getLlave());
				break;
				case GEOZONA:
					mapa.put("llave", ((GeozonaParticionEO)territorio).getLlave());
				break;
				default:
					break;
			}
			sqlSession.insert("eventos.eventos.agregarllaves",mapa);
		}
		
		return eventoSocial;
	}
	
	public void eliminarEventoSocial (EventoSocialEO eventoSocial) {
		logger.debug("Evento {}",eventoSocial);
		sqlSession.delete("eventos.eventos.eliminar",eventoSocial);
		sqlSession.delete("eventos.eventos.eliminarllaves",eventoSocial);
	}
	
	public NivelesDO[] listadoNiveles(){
		NivelesDO[] listado=new NivelesDO[6];
		listado[0]=NivelesDO.NACIONAL;
		listado[1]=NivelesDO.ENTIDAD;
		listado[2]=NivelesDO.MUNICIPIO;
		listado[3]=NivelesDO.DFEDERAL;
		listado[4]=NivelesDO.DLOCAL;
		listado[5]=NivelesDO.GEOZONA;
		return listado;
	}
	
	public EstatusEventoDO[] listadoEstatus(){
		return EstatusEventoDO.values();
	}

	public TipoEventoDO[] listadoTipo(){
		logger.debug("Lsitado Tipos {}",TipoEventoDO.values()[0]);
		return TipoEventoDO.values();
	}
	
//	public Modelo<JavaBeanT> obtenerTabla(S) {
//		Modelo<JavaBeanT> tabla=new Modelo<>();
//		List<JavaBeanT> listado=new ArrayList<>();
//		
//	}
	
	public Modelo<JavaBeanT> nivelTerritorio(NivelesDO nivel, List<EntidadEO> entidades ) {
		Modelo<JavaBeanT> tabla=new Modelo<>();
		List<JavaBeanT> listado=new ArrayList<>();
		logger.debug("Entidades {} Nivel {} ",entidades,nivel);
		if(entidades == null || entidades.isEmpty()){
			entidades = new ArrayList<>();
		}
		switch (nivel) {
			case MUNICIPIO:
				listado=sqlSession.selectList("catalogos.municipios.listadoPorEntidades",entidades);
			break;
			case DFEDERAL:
				listado=sqlSession.selectList("catalogos.dFederales.listadoPorEntidades",entidades);
			break;
			case DLOCAL:
				listado=sqlSession.selectList("catalogos.dLocales.listadoPorEntidades",entidades);
			break;
			default:
			break;
		}
		logger.debug("El listado de nivel es {}",listado);
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}
	
	public Modelo<GeozonaEO> tablaGeozonas() {
		Modelo<GeozonaEO> tabla =new Modelo<>();
		List<GeozonaEO> listado=new ArrayList<>();
		listado=sqlSession.selectList("catalogos.geozonas.listado");
		logger.debug("El listado {}",listado);
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}
	
	public Modelo<GeozonaParticionEO> crearModeloParticiones(List<GeozonaParticionEO> particiones){
		logger.debug("Particiones {}",particiones);
		Modelo<GeozonaParticionEO> tabla =new Modelo<>();
		List<GeozonaParticionEO> listado=particiones;
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}
	

	public Modelo<JavaBeanT> territoriosSubnivel(GeozonaEO geozona, List<GeozonaParticionEO> particiones){
		Modelo<JavaBeanT> tabla =new Modelo<>();
		List<JavaBeanT> listado=new ArrayList<>();
		if (!particiones.isEmpty()) {
			switch (geozona.getNivel()) {
				case ENTIDAD:
					listado = sqlSession.selectList("catalogos.entidades.listadoPorGeozonaParticionesLlaves", particiones);
					break;
				case MUNICIPIO:
					listado = sqlSession.selectList("catalogos.municipios.listadoPorGeozonaParticionesLlaves", particiones);
					break;
				default:
					break;
			}
		}
		
		tabla.setListado(listado);
		if (!listado.isEmpty()) {
			tabla.setSeleccionado(listado.get(0));
		}
		return tabla;
	}
	
}
