package com.saganet.politik.components.catalogos;

import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.saganet.politik.database.catalogos.EntidadEO;
import com.saganet.politik.database.catalogos.ProgramaEO;
import com.saganet.politik.database.catalogos.ProgramaEjercicioEO;
import com.saganet.politik.modelos.JavaBeanT;
import com.saganet.politik.modelos.Modelo;

@Component("ProgramasEjerciciosC")
public class ProgramasEjerciciosC {
	
	@Autowired
	SqlSession sqlSession;
	
	private static final Logger logger = LoggerFactory.getLogger(ProgramasEjerciciosC.class);
	
	public Modelo<ProgramaEjercicioEO> modelo(ProgramaEO programa){
		Modelo<ProgramaEjercicioEO> modelo;
		List<ProgramaEjercicioEO> listado;
		
		listado = sqlSession.selectList("catalogos.programasEjercicios.listadoByIdPrograma", programa);
		logger.debug("listado ProgramasEjercicios: {}", listado);
		
		modelo = new Modelo<>();
		modelo.setListado(listado);
		
		if(!listado.isEmpty()){
			modelo.setSeleccionado(listado.get(0));
		}
		
		logger.debug("Modelo ProgramasEjercicios: {}",modelo);
		
		return modelo;
	}
	
	public ProgramaEjercicioEO nuevo(ProgramaEO programa){
		ProgramaEjercicioEO nuevo;
		nuevo = new ProgramaEjercicioEO();
		nuevo.setIdPrograma(programa.getId());
		return nuevo;
	}
	
	public ProgramaEjercicioEO guardar(ProgramaEjercicioEO nuevo){
		logger.debug("ProgramaEjercicio Recibido: {}", nuevo);
		
		//Formateamos_la_fecha
		Format formatter = new SimpleDateFormat("yyyy-MM-dd");
		nuevo.setFechaInicio(formatter.format(nuevo.getIni()));
		nuevo.setFechaTermino(formatter.format(nuevo.getFin()));
		
		sqlSession.insert("catalogos.programasEjercicios.insertar", nuevo);
		logger.debug("El ProgramaEjercicio fue guardado correctamente");
		return nuevo;
	}
	
	public void guardarTerritorios(List<JavaBeanT> territorios, ProgramaEjercicioEO programaEjercicio) {
		logger.debug("Territorios: {}", territorios);
		HashMap<String, Object> params;
		
		for(JavaBeanT jbt : territorios){
			params = new HashMap<>();
			switch (jbt.getClass().getName()) {
			case "EntidadEO":
				logger.debug("OJBT: {}", jbt);
				params.put("idEjercicio", programaEjercicio.getId());
				params.put("llave", ((EntidadEO) jbt).getId());
				break;

			default:
				logger.debug("OJBT: {}", jbt);
				params.put("idEjercicio", programaEjercicio.getId());
				try {
					params.put("llave", jbt.getClass().getMethod("getLlave", new Class[] {}));
				} catch (NoSuchMethodException | SecurityException e) {
					// TODO Auto-generated catch block
					logger.debug("Error al castear javaBeanT: {}",e.toString());
				}
				break;
			}
			logger.debug("Parametros para guardar territorios: {}", params);
			sqlSession.insert("catalogos.programasEjercicios.insertarProgramasEjerciciosLlaves",params);
		}
		
	}
	
	public void eliminarEjercicio(ProgramaEjercicioEO programaEjercicio){
		logger.debug("ProgramaEjercicioEO Recibido: {}", programaEjercicio);
		sqlSession.delete("catalogos.programasEjercicios.eliminarProgramasEjerciciosLlaves",programaEjercicio.getId());
		sqlSession.delete("catalogos.programasEjercicios.eliminarProgramasEjerciciosFuentes",programaEjercicio.getId());
		sqlSession.delete("catalogos.programasEjercicios.eliminarEjercicio",programaEjercicio.getId());
		logger.debug("El Ejercicio se elimino correctamente, junto con los niveles mas bajos.");
	}
	
}
