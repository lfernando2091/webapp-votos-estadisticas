package com.saganet.politik.components.mdm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.saganet.politik.database.catalogos.EntidadEO;
import com.saganet.politik.database.catalogos.TipoClaveEO;
import com.saganet.politik.database.mdm.PersonaClaveEO;
import com.saganet.politik.database.mdm.PersonaEO;
import com.saganet.politik.database.mdm.TablaPersonaEO;
import com.saganet.politik.database.warehouse.EmailEO;
import com.saganet.politik.database.warehouse.RedSocialEO;
import com.saganet.politik.database.warehouse.TelefonoEO;
import com.saganet.politik.modelos.Modelo;

@Component("MDMPersonasC")
public class PersonasC {
	private static final Logger logger = LoggerFactory.getLogger(PersonasC.class);
	
	@Autowired
	SqlSession sqlSession;
	
	public Modelo<PersonaEO> modeloPorClave(EntidadEO entidad, TipoClaveEO tipoClave, String clave){
		Modelo<PersonaEO> modelo;
		HashMap<String, Object> parametros;
		List<PersonaEO> listado;
		
		modelo = new Modelo<PersonaEO>();
		parametros = new HashMap<String, Object>();
		listado = new ArrayList<PersonaEO>();
		
		switch(tipoClave.getId()){
		case 0: //idPersona
			parametros.put("idEntidad", entidad.getId());
			parametros.put("idPersona", Integer.parseInt(clave));
			listado = sqlSession.selectList("mdm.personas.buscarPorIdReg", parametros);
			break;
		case 1: //INE
			parametros.put("idEntidad", entidad.getId());
			parametros.put("idTipoClave", tipoClave.getId());
			parametros.put("clave", clave);
			listado = sqlSession.selectList("mdm.personas.buscarPorClaveReg", parametros);
			break;
		}
		
		logger.debug("Se obtiene listado de Personas: {}", listado);
		
		modelo.setListado(listado);
		if(!listado.isEmpty()){
			modelo.setSeleccionado(listado.get(0));
		}
		
		return modelo;
	}
	
	public Modelo<PersonaEO> modeloPorIdPersona(EntidadEO entidadNacimiento, Integer idPersona){
		Modelo<PersonaEO> modelo;
		HashMap<String, Object> parametros;
		List<PersonaEO> listado;
		
		modelo = new Modelo<PersonaEO>();
		parametros = new HashMap<String, Object>();
		listado = new ArrayList<PersonaEO>();
		parametros.put("idEntidad", entidadNacimiento.getId());
		parametros.put("idPersona", idPersona);
		
		listado = sqlSession.selectList("mdm.personas.buscarPorIdNac", parametros);
		
		modelo.setListado(listado);
		if(!listado.isEmpty()){
			modelo.setSeleccionado(listado.get(0));
		}
		
		return modelo;
	}
	
	public Modelo<PersonaEO> modeloPorDatos(EntidadEO entidad, PersonaEO persona){
		Modelo<PersonaEO> modelo;
		List<PersonaEO> listado;
		HashMap<String, Object> parametros;
		
		modelo = new Modelo<PersonaEO>();
		parametros = new HashMap<String, Object>();
		
		persona.setNombre(persona.getNombre() != null ? persona.getNombre().toUpperCase() : null);
		persona.setPrimerApellido(persona.getPrimerApellido() != null ? persona.getPrimerApellido().toUpperCase() : null);
		persona.setSegundoApellido(persona.getSegundoApellido() != null ? persona.getSegundoApellido().toUpperCase() : null);
		
		parametros.put("idEntidad", entidad.getId());
		parametros.put("persona", persona);
		
		listado = sqlSession.selectList("mdm.personas.buscarPorDatosReg", parametros);
		
		logger.debug("Se obtiene listado de Personas: {}", listado);
		
		modelo.setListado(listado);
		if(!listado.isEmpty()){
			modelo.setSeleccionado(listado.get(0));
		}
		
		return modelo;
	}
	
	public Modelo<PersonaEO> modeloVacio(){
		Modelo<PersonaEO> modelo;
		List<PersonaEO> listado;
		
		modelo = new Modelo<PersonaEO>();
		listado = new ArrayList<PersonaEO>();
		modelo.setListado(listado);
		
		return modelo;
	}
	
	public PersonaEO personaVacia(){
		PersonaEO persona;
		
		persona = new PersonaEO();
		
		return persona;
	}
	
	public void completarPersona(PersonaEO persona){
		List<PersonaClaveEO> claves;
		List<TablaPersonaEO> tablas;
		List<TelefonoEO> telefonos;
		List<EmailEO> eMails;
		List<RedSocialEO> redesSociales;
		
		HashMap<String, Object> datos;
		
		claves = sqlSession.selectList("mdm.clavesPersonas.buscarPorPersona", persona);
		tablas = sqlSession.selectList("mdm.tablasPersonas.buscarPorPersona", persona);
		telefonos = sqlSession.selectList("warehouse.telefonos.buscarPorPersona", persona);
		eMails = sqlSession.selectList("warehouse.eMails.buscarPorPersona", persona);
		redesSociales = sqlSession.selectList("warehouse.redesSociales.buscarPorPersona", persona);
		
		persona.setClaves(claves);
		persona.setTablas(tablas);
		persona.setTelefonos(telefonos);
		persona.setEMails(eMails);
		persona.setRedesSociales(redesSociales);
		
		for(TablaPersonaEO tabla : persona.getTablas()){
			datos = sqlSession.selectOne("mdm.tablasPersonas.datosPorTablaPersona", tabla);
			tabla.setDatos(datos);
		}
		
		logger.debug("Se completa Persona: {}", persona);		
	}
}
