package com.saganet.politik.components.encuestas.captura;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.saganet.politik.components.encuestas.admin.CampaniasC;
import com.saganet.politik.database.encuestas.admin.CampaniaEO;
import com.saganet.politik.database.encuestas.admin.PreguntaEO;
import com.saganet.politik.database.encuestas.captura.ContactoEO;
import com.saganet.politik.database.encuestas.captura.CuestionarioEO;
import com.saganet.politik.dominios.EstatusCuestionarioDO;

@Component("CuestionarioC")
public class CuestionarioC {
	
	private static final Logger logger = LoggerFactory.getLogger(CuestionarioC.class);
	
	@Autowired
	CampaniasC campaniaC;
	
	@Autowired
	SqlSession sqlSession;

	private HSSFWorkbook libro;
	
	public CuestionarioEO cuestionarioByNick(){
		String nick;
		nick = "admin";
		CuestionarioEO cuestionario;
		ContactoEO contacto;
		HashMap<String, Object> params;
		
		cuestionario = new CuestionarioEO();
		cuestionario.setCampania(campaniaC.campaniaCompetaByNick(nick));
		
		contacto = sqlSession.selectOne("encuestas.captura.cuestionario.contactoByEstatus", cuestionario.getCampania().getTablaContactos());
		
		//CAmbiamos_estatus_del_contacto_a_ocupado
		params = new HashMap<>();
		params.put("tablaContactos", cuestionario.getCampania().getTablaContactos());
		params.put("estatus", "OCUPADO");
		params.put("id", contacto.getId());
		
		sqlSession.update("encuestas.captura.cuestionario.cabiarEstatusContacto", params);
		
		cuestionario.setContacto(contacto);
		
		logger.debug("CuestionarioByNick: {}", cuestionario);
		
		return cuestionario;
	}
	
	public void guardarCuestionario(CuestionarioEO cuestionario){
		
		HashMap<String, Object> params;
		StringBuilder camposPreguntas;
		StringBuilder camposRespuestas;
		
		camposPreguntas = new StringBuilder();
		camposRespuestas = new StringBuilder();
		
		for(PreguntaEO pregunta : cuestionario.getCampania().getEncuesta().getPreguntas()){
			camposPreguntas.append("_"+pregunta.getConsecutivoPregunta()+",");
		}
		
		for(PreguntaEO pregunta : cuestionario.getCampania().getEncuesta().getPreguntas()){
			camposRespuestas.append("'"+pregunta.getRespuesta()+"',");
		}
		
		logger.debug("cuestionario: {}", cuestionario);
		
		params = new HashMap<>();
		params.put("cuestionario", cuestionario);
		params.put("camposPreguntas", camposPreguntas);
		params.put("camposRespuestas", camposRespuestas);
		
		try{
			
			//Guardamos_cuestionario
			sqlSession.insert("encuestas.captura.cuestionario.insertar", params);
			
			//CAmbiamos_estatus_del_contacto_a_encuestado
			params = new HashMap<>();
			params.put("tablaContactos", cuestionario.getCampania().getTablaContactos());
			params.put("estatus", "ENCUESTADO");
			params.put("id", cuestionario.getContacto().getId());
			
			sqlSession.update("encuestas.captura.cuestionario.cabiarEstatusContacto", params);
			
		}catch(Exception e){
			
			//CAmbiamos_estatus_del_contacto_a_libre
			params = new HashMap<>();
			params.put("tablaContactos", cuestionario.getCampania().getTablaContactos());
			params.put("estatus", "LIBRE");
			params.put("id", cuestionario.getContacto().getId());
			
			sqlSession.update("encuestas.captura.cuestionario.cabiarEstatusContacto", params);
			
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "¡ERROR!", "No se guardo la encuesta."));
			
			logger.debug("Error al guardat el cuestionario: {}", e.getCause());
		}
		
	}
	
	public void cancelarCuestionario(ContactoEO contacto){
		logger.debug("contacto: {}", contacto);
	}
	
	public EstatusCuestionarioDO[] estatusCuestionario(){
		return EstatusCuestionarioDO.values();
	}
	
	public String validaContactosDisponibles(){
		
		String nick;
		nick = "admin";
		CuestionarioEO cuestionario;
		
		cuestionario = new CuestionarioEO();
		cuestionario.setCampania(campaniaC.campaniaCompetaByNick(nick));
		
		Integer validacion = sqlSession.selectOne("encuestas.captura.cuestionario.validaContactosDisponibles", cuestionario.getCampania().getTablaContactos());
		
		if(validacion>0){
			return "SI";
		}else{
			return "NO";
		}
		
	}
	
	public void descargarListado(CampaniaEO campania){
		
		FacesContext facesContext = FacesContext.getCurrentInstance();
		ExternalContext externalContext = facesContext.getExternalContext();
		HttpServletResponse response = (HttpServletResponse) externalContext.getResponse();
		
		logger.debug("Vamos a crear el listado");


		libro = new HSSFWorkbook();
		
		//Se crea una hoja
		HSSFSheet hoja = libro.createSheet("Hoja1");
		
		//Se crea una fila
		HSSFRow fila = hoja.createRow(0);
		
		//Se crea una celda
		HSSFCell celda = fila.createCell(0);
		
		//Se asigna contenido a la celda
		celda.setCellValue("¡Hola mundo!");
		
		//Guardamos el excel generado
//		try {
//			OutputStream out = new FileOutputStream("src/main/webapp/resources/SimpleExcel.xls");
//			libro.write(out);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			logger.debug("Error al guardar el listado: {}", e.toString());
//			e.printStackTrace();
//		}
		
		//Descargamos el archivo
		
		
		try{
			response.setContentType("application/force-download");
			response.setHeader("Content-Disposition", "attachment;  filename=\"SimpleExcel.xls");
			
			ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();
			libro.write(outByteStream);
			
			byte[] outArray = outByteStream.toByteArray();
			response.setContentType("application/ms-excel");
			response.setContentLength(outArray.length);
			response.setHeader("Expires:", "0");
			response.setHeader("Content-Disposition", "attachment; filename=testxls.xls");
			OutputStream outStream = response.getOutputStream();
			outStream.write(outArray);
			outStream.flush();
			
//			outStream.close();
			
		}catch(IOException e){
			logger.debug("Error al descargar el listado: {}", e.toString());
		}
		
	}
	
}
