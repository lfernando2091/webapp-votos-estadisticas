package com.saganet.politik.components.catalogos;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import com.saganet.politik.beans.seguridad.Usuario;
import com.saganet.politik.database.administracion.UsuarioEO;
import com.saganet.politik.database.catalogos.DispositivoMovilEO;
import com.saganet.politik.modelos.Modelo;

@Component("DispositivosMovilesC")
public class DispositivosMovilesC {
	
	@Autowired
	SqlSession sqlSession;
	
	private static final Logger logger = LoggerFactory.getLogger(DispositivosMovilesC.class);
	
	public Modelo<DispositivoMovilEO> modelo(){
		Modelo<DispositivoMovilEO> modelo;
		List<DispositivoMovilEO> listado;
		
		listado = sqlSession.selectList("catalogos.dispositivosMoviles.listado");
		logger.debug("Listado DispositivosMoviles: {}", listado);
		
		modelo = new Modelo<>();
		modelo.setListado(listado);
		
		if(!listado.isEmpty()){
			modelo.setSeleccionado(listado.get(0));
		}
		
		logger.debug("Modelo DispositivosMoviles: {}", modelo);
		return modelo;
	}
	
	public DispositivoMovilEO nuevo(){
		DispositivoMovilEO nuevo = new DispositivoMovilEO();
		nuevo.setNick(getUsuario().getNick());
		return nuevo;
	}
	
	public void guardar(DispositivoMovilEO nuevo){
		logger.debug("Dispositivo Recibido: {}", nuevo);
		sqlSession.insert("catalogos.dispositivosMoviles.insertar", nuevo);
		logger.debug("El Dispositivo se guardo correctamente.");
	}
	
	public void actualizar(DispositivoMovilEO dispositivoMovil){
		dispositivoMovil.setNickActualizacion(getUsuario().getNick());
		logger.debug("DispositivoMovil Recibido: {}", dispositivoMovil);
		sqlSession.update("catalogos.dispositivosMoviles.actualizar", dispositivoMovil);
		logger.debug("El DispositivoMovil se actualizo correctamente.");
	}
	
	public UsuarioEO getUsuario(){
		return ((Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsuario();
	}
	
}
