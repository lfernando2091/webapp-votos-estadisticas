package com.saganet.politik.components.diaD;

import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.StringTokenizer;

import javax.faces.event.ValueChangeEvent;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeBodyPart;

import org.apache.ibatis.session.SqlSession;
import org.primefaces.component.inputswitch.InputSwitch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.binding.message.MessageBuilder;
import org.springframework.binding.message.MessageContext;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.webflow.execution.RequestContextHolder;

import com.saganet.politik.beans.seguridad.Usuario;
import com.saganet.politik.database.administracion.UsuarioEO;
import com.saganet.politik.database.diaD.MovilizadoEO;
import com.saganet.politik.modelos.Modelo;

@Component("diaDJornadaC")
public class JornadaC {
	private static final Logger logger = LoggerFactory.getLogger(JornadaC.class);
	
	@Autowired SqlSession sqlSession;
	
	public HashMap<String, Object> nuevoMapa(){
		return new HashMap<>();
	}
	
	public void registrarFolio(HashMap<String, Object> mapa){
		MessageContext messageContext;
		Boolean flag;
		Integer folio;
		HashMap<String, Object> parametros;
		
		parametros = new HashMap<>();
		
		messageContext = RequestContextHolder.getRequestContext().getMessageContext();
		folio = Integer.parseInt((String) mapa.get("folio"));
		
		parametros.put("folio", folio);
		parametros.put("grupos", getUsuario().getProgamas());
		
		flag = sqlSession.selectOne("diaD.movilizado.estadoRegistroJornada", parametros);
		 
		if (flag != null) {

			if (flag) {
				messageContext.addMessage(new MessageBuilder().error().source("registroFolio")
						.defaultText("El Folio " + folio + " ya estaba asignado").build());
			} else {
				sqlSession.update("diaD.movilizado.registrarJornada", parametros);
				messageContext.addMessage(new MessageBuilder().info().source("registroFolio")
						.defaultText("Folio " + folio + " registrado exitosamente").build());
			}
		} else {
			messageContext.addMessage(new MessageBuilder().error().source("registroFolio")
					.defaultText("El Folio " + folio + " no existe").build());
		}
		
		mapa.remove("folio");
	}
	
	public void registrarFolio2(HashMap<String, Object> mapa, Modelo<MovilizadoEO> modeloMovilizados){
		Integer folio;
		Boolean registroJornada, registroJornadaNuevo;
		HashMap<String, Object> parametros;
		
		parametros = new HashMap<>();
		
		folio = (Integer) mapa.get("folio2");
		registroJornada = (Boolean) mapa.get("registroJornada2");
		registroJornadaNuevo = !registroJornada.booleanValue();
		
		parametros.put("folio", folio);
		parametros.put("registroJornada", registroJornadaNuevo);
		
		sqlSession.update("diaD.movilizado.registrarJornada2", parametros);
		
		for(MovilizadoEO m : modeloMovilizados.getListado()){
			if(m.getFolio().equals(folio)){
				m.setRegistroJornada(registroJornadaNuevo.booleanValue());
			}
		}
	}
	
	public void registrarFolioX(ValueChangeEvent e){
		InputSwitch inputSwitch;
		Integer folio;
		Boolean registroJornada;
		HashMap<String, Object> parametros;
		
		parametros = new HashMap<>();
		
		inputSwitch = (InputSwitch) e.getSource();
		folio = Integer.parseInt(inputSwitch.getId().substring(6));
		registroJornada = (Boolean) inputSwitch.getValue();
		
		parametros.put("folio", folio);
		parametros.put("registroJornada", registroJornada);
		parametros.put("grupos", getUsuario().getProgamas());
		
		sqlSession.update("diaD.movilizado.registrarJornada2", parametros);
	}


@Scheduled(cron="0 */1 * * * *")
	public void leerMensajes(){
		logger.debug("Entre: {} ");
		String contenido, campo;
		StringTokenizer tokens;
		List<String> listadoMalos;
		List<Integer> listadoValidos;
		 int nDatos;
		String host = "mail.saganet.com.mx";
		String username = "sms@saganet.com.mx";
		String password = "SaganetSMS";
		// Create empty properties
		Properties props = new Properties();
		// Get session
		Session session = Session.getDefaultInstance(props, null);
		// Get the store
		Store store;
		try {
			store = session.getStore("imap");
			store.connect(host, username, password);
			// Get folder
			Folder folder = store.getFolder("INBOX");
			folder.open(Folder.READ_ONLY);
			// Get directory
			Message message[] = folder.getMessages();
			listadoValidos = new ArrayList<>();
			listadoMalos = new ArrayList<>();
			  for(Message mensaje: contenido) {
				contenido = new String(mensaje.getContent().toString().replace(" ", ""));
				 logger.debug("Campo: {}", mensaje);
				tokens = new StringTokenizer(contenido, ",");
				nDatos=tokens.countTokens();
				if(nDatos>0){
					 while(tokens.hasMoreTokens()){
						 campo = tokens.nextToken().toString();
						 logger.debug("Campo: {}", campo);
						if(this.isNumeric(campo.toString())==true){
							listadoValidos.add(Integer.parseInt(campo));
						}else{
							listadoMalos.add(campo.toString());
						}
					 }
				}
				logger.debug("Válidos: {} ", listadoValidos);
				logger.debug("Malos: {}", listadoMalos);
			///logger.debug(i + ": " + message[i].getFrom()[0]
			/// + "\t" + message[i].getSubject()+": {}");
			//message[i].getContent();
			}
			// Close connection
			folder.close(false);
			store.close();
		} catch (MessagingException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

public boolean isNumeric(String str)
{
  NumberFormat formatter = NumberFormat.getInstance();
  ParsePosition pos = new ParsePosition(0);
  formatter.parse(str, pos);
  return str.length() == pos.getIndex();
}
	private UsuarioEO getUsuario() {
		return ((Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsuario();
	}
}
